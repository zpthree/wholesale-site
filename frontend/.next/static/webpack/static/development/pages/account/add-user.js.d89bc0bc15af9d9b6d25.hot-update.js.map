{"version":3,"file":"static/webpack/static/development/pages/account/add-user.js.d89bc0bc15af9d9b6d25.hot-update.js","sources":["webpack:///./components/CreateUser.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport CreateUserForm from './CreateUserForm';\nimport {\n  validateFirstName,\n  validateUsername,\n  validatePermissions,\n  validatePassword,\n  validateConfirmPassword,\n  comparePasswords,\n} from '../lib/validation';\n\nconst CreateUserStyles = styled.div`\n  h4 {\n    color: ${props => props.theme.red};\n  }\n\n  h5 {\n    margin-bottom: 1rem;\n  }\n\n  .form-row.permissions .row-full {\n    @media screen and (min-width: 768px) {\n      display: flex;\n      flex-direction: row;\n\n      label p {\n        margin-right: 1rem;\n        margin-left: 0;\n      }\n    }\n  }\n`;\n\nconst CREATE_USER_MUTATION = gql`\n  mutation CREATE_USER_MUTATION(\n    $firstName: String!\n    $lastName: String\n    $company: String\n    $email: String\n    $address: String\n    $phone: String\n    $username: String!\n    $password: String!\n    $permissions: String!\n    $canOrder: Boolean!\n  ) {\n    createUser(\n      data: {\n        firstName: $firstName\n        lastName: $lastName\n        company: $company\n        email: $email\n        address: $address\n        phone: $phone\n        username: $username\n        password: $password\n        permissions: $permissions\n        canOrder: $canOrder\n        active: true\n      }\n    ) {\n      id\n    }\n  }\n`;\n\nclass CreateUser extends Component {\n  state = {\n    firstName: '', // required\n    lastName: '',\n    username: '', // required\n    company: '',\n    email: '',\n    permissions: '', // required\n    canOrder: false, // required - needs to be false by default\n    phone: '',\n    address: '',\n    password: '', // required\n    confirmPassword: '', // required\n    error: {},\n  };\n\n  handleChange = e => {\n    const { name, type, value } = e.target;\n    const val = type === 'number' ? parseFloat(value) : value;\n    this.setState({ [name]: val });\n  };\n\n  handleCheckbox = e => {\n    const { name } = e.target;\n    this.setState({ [name]: !this.state.canOrder });\n  };\n\n  validateInput = e => {\n    const { name, value } = e.target;\n    const error = {};\n\n    if (name === 'firstName' && validateFirstName(value)) {\n      error.firstName = validateFirstName(value);\n    }\n\n    if (name === 'username' && validateUsername(value)) {\n      error.username = validateUsername(value);\n    }\n\n    if (name === 'permissions' && validatePermissions(value)) {\n      error.permissions = validatePermissions(value);\n    }\n\n    this.setState({\n      error: {\n        ...this.state.error,\n        ...error,\n      },\n    });\n  };\n\n  validateForm = () => {\n    let isValid;\n    const error = {};\n    const {\n      firstName,\n      username,\n      permissions,\n      password,\n      confirmPassword,\n    } = this.state;\n\n    if (validateFirstName(firstName)) {\n      error.firstName = validateFirstName(firstName);\n    }\n\n    if (validateUsername(username)) {\n      error.username = validateUsername(username);\n    }\n\n    if (validatePermissions(permissions)) {\n      error.permissions = validatePermissions(permissions);\n    }\n\n    this.setState({ error });\n  };\n\n  resetState = e => {\n    this.setState({\n      firstName: '', // required\n      lastName: '',\n      username: '', // required\n      company: '',\n      email: '',\n      permissions: '', // required\n      canOrder: false, // required - needs to be false by default\n      phone: '',\n      address: '',\n      password: '', // required\n      confirmPassword: '', // required\n      error: {},\n    });\n\n    window.scrollTo(0, 0);\n  };\n\n  render() {\n    const errorMessage = this.state.error;\n\n    return (\n      <Mutation mutation={CREATE_USER_MUTATION} variables={this.state}>\n        {(createUser, { loading, error }) => (\n          <CreateUserForm\n            handleChange={this.handleChange}\n            handleCheckbox={this.handleCheckbox}\n            validateInput={this.validateInput}\n            validateForm={this.validateForm}\n            resetState={this.resetState}\n            error={errorMessage}\n          />\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default CreateUser;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AAEA;AAAA;AAoBA;AACA;AAgCA;;;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAZA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAZA;AACA;AAcA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAYA;;;;AAjHA;AACA;AAmHA;;;;A","sourceRoot":""}